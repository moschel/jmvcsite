C({"name": "steal", "type": "class", "parent": "../steal/steal.js?steal[app]=jmvc&steal[env]=development", "comment": "<p><p>Steal makes JavaScript dependency management and resource loading easy.</p>\n <p>This page details the steal script (<code>steal/steal.js</code>), \n and steal function which are used to load files into your page. <br />\n For documentation of other Steal projects, read [stealjs StealJS].</p>\n <h3>Quick Overview</h3></p>\n\n<p><p>To start using steal, add the steal script to your page, and tell it the first\n file to load:</p>\n </p></p>\n\n<pre><code class='html'>&lt;script type='text/javascript'\n        src='public/steal/steal.js?<u><b>myapp/myapp.js</b></u>'>&lt;/script></code></pre> \n\n<p><p>In the file (<code>public/myapp/myapp.js</code>), \n 'steal' all other files that you need like:</p></p>\n\n<pre><code class='javascript'> steal(\"anotherFile\")           //loads myapp/anotherFiles.js\n    .css('style')               //      myapp/style.css\n    .plugins('jquery/view',     //      jquery/view/view.js\n             'steal/less')      //      steal/less/less.js\n    .then(function(){           //called when all prior files have completed\n       steal.less('myapp')      //loads myapp/myapp.less\n    })\n    .views('//myapp/show.ejs')  //loads myapp/show.ejs</code></pre> <p>Finally compress your page's JavaScript and CSS with:</p>\n\n<pre><code class='javascript'> > js steal/buildjs path/to/mypage.html</code></pre> <h2>Use</h2>\n Use of steal.js is broken into 5 parts:\n <ul>\n <li>Loading steal.js </li> \n  <li>Loading your 'application' file.</li>\n    <li>\"Stealing\" scripts</li>\n    <li>Building (Concatenating+Compressing) the app</li>\n    <li>Switching to the production build</li>\n </ul>\n\n\n <h3>Loading <code>steal.js</code></h3>\n <p>First, you need to [download download JavaScriptMVC] (or steal standalone) and unzip it into a\n    public folder on your server.  For this example, lets assume you have the steal script in\n    <code>public/steal/steal.js</code>.   \n </p>\n <p>Next, you need to load the <code>steal.js</code> script in your html page.  We suggest \n    [http://developer.yahoo.com/performance/rules.html#js_bottom bottom loading] your scripts.\n    For example, if your page is in <code>pages/myapp.html</code>, you can get steal like:\n </p>\n\n<pre><code class='html'> &lt;script type='text/javascript'\n     src='../public/steal/steal.js'>\n &lt;/script></code></pre> <h3>Loading your 'application' file</h3>\n <p>The first file your application loads\n is referred to as an \"application\" file.  It loads all the files and resources\n that your application needs.  For this example, we'll put our application file in:\n <code>public/myapp/myapp.js</code>\n </p>\n <p>You have to tell steal where to find it by configuring [steal.static.options].\n There are a lot of ways to configure steal to load your app file, but we've made it really easy:</p>\n\n<pre><code class='html'> &lt;script type='text/javascript'\n     src='../public/steal/steal.js?<u><b>myapp/myapp.js</b></u>'>\n &lt;/script></code></pre> This sets ...\n\n<pre><code class='javascript'> steal.options.startFile = 'myapp/myapp.js'</code></pre> \n\n<p>... and results in steal loading \n <code>public/myapp/myapp.js</code>.</p></p>\n\n<p><div class='whisper'>\n    TIP: If startFile doesn't end with <code>.js</code> (ex: myapp), steal assumes\n    you are using JavaScriptMVC's folder pattern and will load:\n    <code>myapp/myapp.js</code> just to save you 9 characters.\n </div>\n <h3>Stealing Scripts</h3>\n In your files, use the steal function and its helpers\n  to load dependencies then describe your functionality.\n Typically, most of the 'stealing' is done in your application file.  Loading \n jQuery and jQuery.UI from google, a local helpers.js \n and then adding tabs might look something like this:</p>\n\n<pre><code class='javascript'> steal( 'http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.js',\n        'http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.0/jquery-ui.js',\n        'helpers')\n .then( function(){\n   $('#tabs').tabs();\n });</code></pre> \n\n<p>There's a few things to notice:</p>\n\n<ul>\n<li>the steal function can take multiple arguments.  Each argument \ncan be a string, object, or function.  Learn more about what can be passed to \nsteal in the [steal.prototype.init] documentation. </li>\n<li>steal can load cross domain</li></li>\n<li>steal loads relative to the current file</li></li>\n<li>steal adds .js if not present</li></li>\n<li><p>steal is chainable (most function return steal)</p>\n\n<h3>Building the app</h3>\n\n<p>Building the app means combining and compressing your apps JavaScript and CSS into a single file.\nA lot more details can be found on building in the \n[steal.build steal.build documentation].  But, if you used JavaScriptMVC's app or plugin\ngenerator, you can build\nyour app's JS and CSS with:</p></li>\n</ul>\n\n<pre><code class='no-highlight'> js myapp\\scripts\\compress.js</code></pre> \n\n<p>Or if you are using steal without JavaScriptMVC:</p>\n\n<pre><code class='no-highlight'> js steal/buildjs pages/myapp.html -to public/myapp</code></pre> \n\n<p>This creates <code>public/myapp/production.js</code> and <code>public/myapp/production.css</code>.</p>\n\n<p>### Switching to the production build</p>\n\n<p>To use the production files, load steal.production.js instead of steal.js in your html file:</p>\n\n<pre><code class='html'> &lt;script type='text/javascript'\n         src='../public/steal/<u><b>steal.production.js</b></u>?myapp/myapp.js'>\n &lt;/script></code></pre> \n\n<p>## Steal helpers</p>\n\n<p>There are a number of steal helper functions that can be used to load files in a particular location\n or of a type other than JavaScript:</p>\n\n<ul>\n<li>[steal.static.coffee] - loads <br />\n [http://jashkenas.github.com/coffee-script/ CoffeeScript] scripts.</li>\n<li>[steal.static.controllers] - loads controllers relative to the current path.</li>\n<li>[steal.static.css] - loads a css file.</li>\n<li>[steal.static.less] - loads [http://lesscss.org/ Less] style sheets.</li>\n<li>[steal.static.models] - loads models relative to the current path.</li>\n<li>[steal.static.plugins] - loads JavaScript files relative to steal's root folder.</li>\n<li>[steal.static.resources] - loads a script in a relative resources folder.</li>\n<li><p>[steal.static.views] - loads a client side template to be compiled into the production build.</p>\n\n<h2>Script Load Order</h2>\n\n<p>The load order for your scripts follows a consistent last-in first-out order across all browsers. \nThis is the same way the following document.write would work in msie, Firefox, or Safari:</p></li>\n</ul>\n\n<p><pre><code class='javascript'> document.write('&lt;script type=\"text/javascript\" src=\"some_script.js\"></script>')</code></pre> An example helps illustrate this.<br/>\n <img src='http://wiki.javascriptmvc.com/images/last_in_first_out.png'/>\n <table class=\"options\">\n <tr class=\"top\">\n <th>Load Order</th>\n <th class=\"right\">File</th>\n </tr>\n <tbody>\n <tr>\n <td>1</td>\n <td class=\"right\">1.js</td>\n </tr>\n <tr>\n <td>2</td>\n <td class=\"right\">3.js</td>\n </tr>\n <tr>\n <td>3</td>\n <td class=\"right\">4.js</td>\n </tr>\n <tr>\n <td>4</td>\n <td class=\"right\">2.js</td>\n </tr>\n <tr>\n <td>5</td>\n <td class=\"right\">5.js</td>\n </tr>\n <tr class=\"bottom\">\n <td>6</td>\n <td class=\"right\">6.js</td>\n </tr>\n</tbody></table></p>", "parents": ["stealjs"], "construct": "  \n Loads files or runs functions after all previous files and functions have been loaded.\n", "ret": {"description": "<p>returns itself for chaining.</p>", "type": "steal"}, "params": {"resource": {"order": 0, "description": "<p>Each argument represents a resource or function.\n Arguments can be a String, Object, or Function.\n <table class='options'>\n  <tr>\n  <th>Type</th><th>Description</th>\n  </tr>\n  <tr><td>String</td>\n <td>A path to a JavaScript file.  The path can optionally end in '.js'.<br/> <br />\n Paths are typically assumed to be relative to the current JavaScript file. But paths, that start\n with: \n <ul>\n <li><code>http(s)://</code> are absolutely referenced.</li>\n <li><code>/</code> are referenced from the current domain.</li>\n <li><code>//</code> are referenced from the ROOT folder.</li></p>\n\n<p></td></tr>\n  <tr><td>Object</td>\n  <td>An Object with the following properties:\n  <ul>\n  <li>path {String} - relative path to a JavaScript file.  </li>\n  <li>type {optional:String} - Script type (defaults to text/javascript)</li>\n  <li>skipInsert {optional:Boolean} - Include not added as script tag</li>\n  <li>compress {optional:String} - \"false\" if you don't want to compress script</li>\n  <li>package {optional:String} - Script package name (defaults to production.js)</li> \n  </ul>\n  </td></tr>\n  <tr><td>Function</td><td>A function to run after all the prior steals have finished loading</td></tr>\n </table></p>", "name": "resource", "type": "String|Object|Function+", "optional": false}}, "children": ["steal.run", "steal.runNow", "steal.static", "steal.static.pageDir", "steal.static.options", "steal.static.setScriptOptions", "steal.static.init", "steal.static.curDir", "steal.static.start", "steal.static.css", "steal.static.createLink", "steal.static.request", "steal.static.insertHead", "steal.static.plugins", "steal.static.controllers", "steal.static.models", "steal.static.resources", "steal.static.views", "steal.static.coffee", "steal.static.less"]})