C({"name": "jQuery.fixture", "type": "class", "parent": "../jquery/dom/fixture/fixture.js", "comment": "<p>Fixtures simulate AJAX responses by overwriting \n[jQuery.ajax $.ajax], \n[jQuery.get $.get], and \n[jQuery.post $.post]. <br />\nInstead of making a request to a server, fixtures simulate \nthe repsonse with a file or function.</p>\n\n<p>They are a great technique when you want to develop JavaScript \nindependently of the backend. </p>\n\n<h3>Quick Example</h3>\n\n<p>Instead of making a request to <code>/tasks.json</code>,\n   $.ajax will look in <code>fixtures/tasks.json</code>.\n   It's expected that a static <code>fixtures/tasks.json</code> \n   file exists relative to the current page. \n</p>\n\n<p><pre><code class='javascript'>$.ajax({url: \"/tasks.json\",\n  dataType: \"json\",\n  type: \"get\",\n  fixture: \"fixtures/tasks.json\",\n  success: myCallback});</code></pre><h2>Using Fixtures</h2>\nTo enable fixtures, you must add this plugin to your page and \nset the fixture property.  </p>\n\n<p>The fixture property is set as ...</p>\n\n<p><pre><code class='javascript'>//... a property with $.ajax\n$.ajax({fixture: FIXTURE_VALUE})</p>\n\n<p>//... a parameter in $.get and $.post\n$.get (  url, data, callback, type, FIXTURE<em>VALUE )\n$.post(  url, data, callback, type, FIXTURE</em>VALUE )</code></pre><h3>Turning Off Fixtures</h3></p>\n\n<p>To turn off fixtures, simply remove the fixture plugin from \n your page.  The Ajax methods will ignore <code>FIXTURE_VALUE</code>\n and revert to their normal behavior.  If you want to ignore a single\n fixture, we suggest commenting it out.\n</p>\n\n<div class='whisper'>\nPRO TIP:  Don't worry about leaving the fixture values in your source.  \nThey don't take up many characters and won't impact how jQuery makes\nrequests.  They can be useful even after the service they simulate\nis created.\n</div>\n\n<h2>Types of Fixtures</h2>\n\n<p>There are 2 types of fixtures</p>\n\n<ul>\n <li><b>Static</b> - the response is in a file.\n </li>\n <li>\n  <b>Dynamic</b> - the response is generated by a function.\n </li>\n</ul>\n\n<p>There are different ways to lookup static and dynamic fixtures.</p>\n\n<h3>Static Fixtures</h3>\n\n<p>Static fixture locations can be calculated:</p>\n\n<p><pre><code class='javascript'>// looks in test/fixtures/tasks/1.get\n$.ajax({type:\"get\", \n       url: \"tasks/1\", \n       fixture: true}) </code></pre>Or provided:</p>\n\n<p><pre><code class='javascript'>// looks in fixtures/tasks1.json relative to page\n$.ajax({type:\"get\", \n       url: \"tasks/1\", \n       fixture: \"fixtures/task1.json\"})</p>\n\n<p>// looks in fixtures/tasks1.json relative to jmvc root\n// this assumes you are using steal\n$.ajax({type:\"get\", \n       url: \"tasks/1\", \n       fixture: \"//fixtures/task1.json\"})` </code></pre><div class='whisper'>\n  PRO TIP: Use provided fixtures.  It's easier to understand what it is going.\n  Also, create a fixtures folder in your app to hold your fixtures.\n</div></p>\n\n<h3>Dynamic Fixtures</h3>\n\n<p>Dynamic Fixtures are functions that return the arguments the $.ajax callbacks \n  (<code>beforeSend</code>, <code>success</code>, <code>complete</code>, \n   <code>error</code>) expect.  </p>\n\n<p>For example, the \"<code>success</code>\" of a json request is called with \n<code>[data, textStatus, XMLHttpRequest].</p>\n\n<p>There are 2 ways to lookup dynamic fixtures.<p>\nThey can provided:\n\n<pre><code class='javascript'>//just use a function as the fixture property\n$.ajax({\n  type:     \"get\", \n  url:      \"tasks\",\n  data:     {id: 5},\n  dataType: \"json\",\n  fixture: function( settings, callbackType ) {\n    var xhr = {responseText: \"{id:\"+settings.data.id+\"}\"}\n    switch(callbackType){\n      case \"success\": \n        return [{id: settings.data.id},\"success\",xhr]\n      case \"complete\":\n        return [xhr,\"success\"]\n    }\n  }\n})</code></pre>Or found by name on $.fixture:\n\n<pre><code class='javascript'>// add your function on $.fixture\n// We use -FUNC by convention\n$.fixture[\"-myGet\"] = function(settings, cbType){...}\n\n// reference it\n$.ajax({\n  type:\"get\", \n  url: \"tasks/1\", \n  dataType: \"json\", \n  fixture: \"-myGet\"})</code></pre><p>Dynamic fixture functions are called with:</p>\n\n<ul>\n<li> settings - the settings data passed to <code>$.ajax()</code>\n<li> calbackType - the type of callback about to be called: \n <code>\"beforeSend\"</code>, <code>\"success\"</code>, <code>\"complete\"</code>, \n   <code>\"error\"</code></li>\n</ul>\n\n<p>and should return an array of arguments for the callback.<br/><br/></p>\n\n<div class='whisper'>PRO TIP: \nDynamic fixtures are awesome for performance testing.  Want to see what \n10000 files does to your app's performance?  Make a fixture that returns 10000 items.\n\nWhat to see what the app feels like when a request takes 5 seconds to return?  Set\n[jQuery.fixture.delay] to 5000.\n</div>\n\n<h2>Helpers</h2>\n\n<p>The fixture plugin comes with a few ready-made dynamic fixtures and \nfixture helpers:</p>\n\n<ul>\n<li>[jQuery.fixture.make] - creates fixtures for findAll, findOne.</li>\n<li>[jQuery.fixture.-restCreate] - a fixture for restful creates.</li>\n<li>[jQuery.fixture.-restDestroy] - a fixture for restful updates.</li>\n<li>[jQuery.fixture.-restUpdate] - a fixture for restful destroys.</li>\n</ul>\n\n<div class='demo_wrapper' data-demo-src='jquery/dom/fixture/fixture.html'></div>", "plugin": "jquery/dom/fixture", "download": "jquery/dist/jquery.fixture.js", "downloadSize": 0, "test": "jquery/dom/fixture/qunit.html", "parents": ["dom"], "construct": "Takes an ajax settings and returns a url to look for a fixture.  Overwrite this if you want a custom lookup method.\n", "ret": {"description": "<p>the url that will be used for the fixture</p>", "type": "String"}, "params": {"settings": {"order": 0, "description": "", "name": "settings", "type": "Object", "optional": false}}, "children": ["jQuery.fixture.-restUpdate", "jQuery.fixture.-restDestroy", "jQuery.fixture.-restCreate", "jQuery.fixture.make", "jQuery.fixture.xhr", "jQuery.fixture.delay"]})