C({"name": "jQuery.Class.static.callback", "params": {"funcs": {"description": "", "type": "", "optional": false, "order": 0, "name": "funcs"}, "fname": {"order": 1, "description": "<p>If a string, it represents the function to be called. <br />\nIf it is an array, it will call each function in order and pass the return value of the prior function to the\nnext function.</p>", "name": "fname", "type": "String|Array", "optional": false}}, "ret": {"description": "<p>the callback function.</p>", "type": "Function"}, "type": "function", "parent": "jQuery.Class.static", "comment": "<p>Returns a callback function for a function on this Class.\nThe callback function ensures that 'this' is set appropriately.  </p>\n\n<pre><code class='javascript'>$.Class.extend(\"MyClass\",{\n    getData: function() {\n        this.showing = null;\n        $.get(\"data.json\",this.callback('gotData'),'json')\n    },\n    gotData: function( data ) {\n        this.showing = data;\n    }\n},{});\nMyClass.showData();</code></pre><h2>Currying Arguments</h2>\nAdditional arguments to callback will fill in arguments on the returning function.\n\n<pre><code class='javascript'>$.Class.extend(\"MyClass\",{\n   getData: function( <b>callback</b> ) {\n     $.get(\"data.json\",this.callback('process',<b>callback</b>),'json');\n   },\n   process: function( <b>callback</b>, jsonData ) { //callback is added as first argument\n       jsonData.processed = true;\n       callback(jsonData);\n   }\n},{});\nMyClass.getData(showDataFunc)</code></pre><h2>Nesting Functions</h2>\nCallback can take an array of functions to call as the first argument.  When the returned callback function\nis called each function in the array is passed the return value of the prior function.  This is often used\nto eliminate currying initial arguments.\n\n<pre><code class='javascript'>$.Class.extend(\"MyClass\",{\n   getData: function( callback ) {\n     //calls process, then callback with value from process\n     $.get(\"data.json\",this.callback(['process2',callback]),'json') \n   },\n   process2: function( type,jsonData ) {\n       jsonData.processed = true;\n       return [jsonData];\n   }\n},{});\nMyClass.getData(showDataFunc);</code></pre>", "children": []})