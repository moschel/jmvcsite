C({"name": "steal.generate", "params": {"path": {"description": "<p>the folder to get templates from</p>", "type": "String", "optional": false, "order": 0, "name": "path"}, "where": {"description": "<p>where to put the results of the rendered templates</p>", "type": "String", "optional": false, "order": 1, "name": "where"}, "data": {"description": "<p>data to render the templates with.  If force is true, it will overwrite everything</p>", "type": "Object", "optional": false, "order": 2, "name": "data"}}, "ret": {"type": "undefined", "description": ""}, "type": "function", "parent": "../steal/generate/generate.js", "comment": "<p>The Generate plugin makes building code generators crazy easy.\nStealJS comes with its own app generator.  JavaScriptMVC has more complex generators.</p>\n\n<h2>Steal Generators</h2>\n\n<ul>\n<li><code>app</code> - creates an application structure, build and clean scripts.\n\n<pre><code class='text'>js steal/generate/app <i>path/to/app</i> [OPTIONS]</code></pre><dl>\n<dt>path/to/app</dt>\n<dd>The lowercase path you want your application in. \n</dd>\n</dl>\n</li>\n</ul>\n\n<h2>JavaScriptMVC Generators</h3>\n\n<ul>\n<li><code>app</code> - creates a JavaScriptMVC application structure.\n\n<pre><code class='text'>js jquery/generate/app <i>path/to/app</i> [OPTIONS]</code></pre><dl>\n<dt>path/to/app</dt>\n<dd>The lowercase path you want your application in. Keep application names short because they \nare used as namespaces.  The last part of the path will be taken to be your application's name.\n</dd>\n</dl>\n</li>\n<li style='padding-top: 10px;'><code>controller</code> - creates a JavaScriptMVC [jQuery.Controller].\n\n<pre><code class='text'>js jquery/generate/controller <i>App.Controllers.Name</i> [OPTIONS]</code></pre><dl>\n<dt>App.Controllers.Name</dt>\n<dd>The namespaced name of your controller.  For example, if your controller is named\n<code>Cookbook.Controllers.Recipe</code>, the generator will create \n<code>cookbook/controllers/recipe_controller.js</code>. \n</dd>\n</dl>\n</li>\n\n<li style='padding-top: 10px;'><code>model</code> - creates a JavaScriptMVC [jQuery.Model].\n\n<pre><code class='text'>js jquery/generate/model <i>App.Models.Name</i> [TYPE] [OPTIONS]</code></pre><dl>\n<dt>App.Models.Name</dt>\n<dd>The namespaced name of your model.  For example, if your model is named\n<code>Cookbook.Models.Recipe</code>, the generator will create \n<code>cookbook/models/recipe.js</code>. \n</dd>\n</dl>\n</li>\n\n<li style='padding-top: 10px;'><code>page</code> - creates a page that loads steal.js and an application.\n\n<pre><code class='text'>js jquery/generate/model <i>path/to/app</i> <i>path/to/page.html</i></code></pre><dl>\n<dt>path/to/app</dt>\n<dd>The path to your apps folder. \n</dd>\n<dt>path/to/page.html</dt>\n<dd>The path to the page you want to create. \n</dd>\n</dl>\n</li>\n\n<li style='padding-top: 10px;'><code>plugin</code> - creates a JavaScriptMVC plugin file and folder structure.\n\n<pre><code class='text'>js jquery/generate/plugin <i>path/to/plugin</i> [OPTIONS]</code></pre><dl>\n<dt>path/to/plugin</dt>\n<dd>The path to where you want your plugin.  This also should be the namespace and name of\nwhatever JavaScript object created.  Check out mxui for examples.\n</dd>\n</dl>\n</li>\n<li style='padding-top: 10px;'><code>scaffold</code> - creates the controllers, models, and fixtures used\nto provide basic CRUD functionality..\n\n<pre><code class='text'>js jquery/generate/scaffold <i>App.Models.ModelName</i> [OPTIONS]</code></pre><dl>\n<dt>App.Models.ModelName</dt>\n<dd>The model resource you want to add CRUD functionality to.\n</dd>\n</dl>\n</li>\n</ul>\n\n\n<h2>The Generator Function</h2>\n\n<p>Renders a folders contents with EJS and data and then copies it to another folder.</p>\n\n<pre><code class='javascript'>steal.generate(\n  \"path/to/my_template_folder\",\n  \"render/templates/here\", \n  {\n    data: \"to be used\"\n  })</code></pre>", "plugin": "steal/generate", "parents": ["stealjs"], "children": []})