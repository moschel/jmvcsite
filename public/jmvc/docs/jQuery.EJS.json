C({"name": "jQuery.EJS", "type": "class", "parent": "../jquery/view/ejs/ejs.js", "comment": "<p>Ejs provides <a href=\"http://www.ruby-doc.org/stdlib/libdoc/erb/rdoc/\">ERB</a> \nstyle client side templates.  Use them with controllers to easily build html and inject\nit into the DOM.</p>\n\n<h3>Example</h3>\n\n<p>The following generates a list of tasks:</p>\n\n<pre><code class='html'>&lt;ul>\n&lt;% for(var i = 0; i < tasks.length; i++){ %>\n    &lt;li class=\"task &lt;%= tasks[i].identity %>\">&lt;%= tasks[i].name %>&lt;/li>\n&lt;% } %>\n&lt;/ul></code></pre>For the following examples, we assume this view is in <i>'views\\tasks\\list.ejs'</i>\n<h2>Use</h2>\nThere are 2 common ways to use Views: \n\n<ul>\n    <li>Controller's [jQuery.Controller.prototype.view view function]</li>\n    <li>The jQuery Helpers: [jQuery.fn.after after], \n                            [jQuery.fn.append append], \n                            [jQuery.fn.before before], \n                            [jQuery.fn.before html], \n                            [jQuery.fn.before prepend], \n                            [jQuery.fn.before replace], and \n                            [jQuery.fn.before text].</li>\n</ul>\n\n<h3>View</h3>\njQuery.Controller.prototype.view is the preferred way of rendering a view.  \nYou can find all the options for render in \nits [jQuery.Controller.prototype.view documentation], but here is a brief example of rendering the \n<i>list.ejs</i> view from a controller:\n\n<pre><code class='javascript'>$.Controller.extend(\"TasksController\",{\n    init: function( el ) {\n        Task.findAll({},this.callback('list'))\n    },\n    list: function( tasks ) {\n        this.element.html(\n         this.view(\"list\", {tasks: tasks})\n       )\n    }\n})</code></pre>\n\n<h2>Hooking up controllers</h2>\n\n<p>After drawing some html, you often want to add other widgets and plugins inside that html.\nView makes this easy.  You just have to return the Contoller class you want to be hooked up.</p>\n\n<pre><code class='javascript'>&lt;ul &lt;%= Mxui.Tabs%>>...&lt;ul></code></pre>\n\n<p>You can even hook up multiple controllers:</p>\n\n<pre><code class='javascript'>&lt;ul &lt;%= [Mxui.Tabs, Mxui.Filler]%>>...&lt;ul></code></pre>\n\n<h2>View Helpers</h2>\n\n<p>View Helpers return html code.  View by default only comes with \n[jQuery.EJS.Helpers.prototype.view view] and [jQuery.EJS.Helpers.prototype.text text].\nYou can include more with the view/helpers plugin.  But, you can easily make your own!\nLearn how in the [jQuery.EJS.Helpers Helpers] page.</p>", "plugin": "jquery/view/ejs", "parents": ["jQuery.View"], "download": "jquery/dist/jquery.view.ejs.js", "downloadSize": 0, "test": "jquery/view/ejs/qunit.html", "construct": "  Creates a new view\n", "ret": {"type": "jquery.ejs", "description": ""}, "params": {"options": {"order": 0, "description": "<p>A hash with the following options</p>\n\n<table class=\"options\">\n    <tbody><tr><th>Option</th><th>Default</th><th>Description</th></tr>\n    <tr>\n     <td>url</td>\n     <td>&nbsp;</td>\n     <td>loads the template from a file.  This path should be relative to <i>[jQuery.root]</i>.\n     </td>\n    </tr>\n    <tr>\n     <td>text</td>\n     <td>&nbsp;</td>\n     <td>uses the provided text as the template. Example:<br/><code>new View({text: '&lt;%=user%>'})</code>\n     </td>\n    </tr>\n    <tr>\n     <td>element</td>\n     <td>&nbsp;</td>\n     <td>loads a template from the innerHTML or value of the element.\n     </td>\n    </tr>\n    <tr>\n     <td>type</td>\n     <td>'<'</td>\n     <td>type of magic tags.  Options are '&lt;' or '['\n     </td>\n    </tr>\n    <tr>\n     <td>name</td>\n     <td>the element ID or url </td>\n     <td>an optional name that is used for caching.\n     </td>\n    </tr>\n    <tr>\n     <td>cache</td>\n     <td>true in production mode, false in other modes</td>\n     <td>true to cache template.\n     </td>\n    </tr>\n\n   </tbody></table>", "name": "options", "type": "Object", "optional": false}}, "children": ["jQuery.EJS.prototype", "jQuery.EJS.prototype.render", "jQuery.EJS.static", "jQuery.EJS.static.text", "jQuery.EJS.static.lineNumber", "jQuery.EJS.static.options", "jQuery.EJS.Helpers"]})