C({"name": "q", "type": "attribute", "parent": "../jquery/jquery.js", "comment": "<p>\"\n        }\n    },</p>\n\n<pre><code>ajax: function( origSettings ) {\n    var s = jQuery.extend(true, {}, jQuery.ajaxSettings, origSettings),\n        jsonp, status, data, type = s.type.toUpperCase(), noContent = rnoContent.test(type);\n\n    s.url = s.url.replace( rhash, \"\" );\n\n    // Use original (not extended) context object if it was provided\n    s.context = origSettings &amp;&amp; origSettings.context != null ? origSettings.context : s;\n\n    // convert data if not already a string\n    if ( s.data &amp;&amp; s.processData &amp;&amp; typeof s.data !== \"string\" ) {\n        s.data = jQuery.param( s.data, s.traditional );\n    }\n\n    // Handle JSONP Parameter Callbacks\n    if ( s.dataType === \"jsonp\" ) {\n        if ( type === \"GET\" ) {\n            if ( !jsre.test( s.url ) ) {\n                s.url += (rquery.test( s.url ) ? \"&amp;\" : \"?\") + (s.jsonp || \"callback\") + \"=?\";\n            }\n        } else if ( !s.data || !jsre.test(s.data) ) {\n            s.data = (s.data ? s.data + \"&amp;\" : \"\") + (s.jsonp || \"callback\") + \"=?\";\n        }\n        s.dataType = \"json\";\n    }\n\n    // Build temporary JSONP function\n    if ( s.dataType === \"json\" &amp;&amp; (s.data &amp;&amp; jsre.test(s.data) || jsre.test(s.url)) ) {\n        jsonp = s.jsonpCallback || (\"jsonp\" + jsc++);\n\n        // Replace the =? sequence both in the query string and the data\n        if ( s.data ) {\n            s.data = (s.data + \"\").replace(jsre, \"=\" + jsonp + \"$1\");\n        }\n\n        s.url = s.url.replace(jsre, \"=\" + jsonp + \"$1\");\n\n        // We need to make sure\n        // that a JSONP style response is executed properly\n        s.dataType = \"script\";\n\n        // Handle JSONP-style loading\n\n        var customJsonp = window[ jsonp ];\n\n        window[ jsonp ] = function( tmp ) {\n            if ( jQuery.isFunction( customJsonp ) ) {\n                customJsonp( tmp );\n\n            } else {\n                // Garbage collect\n                window[ jsonp ] = undefined;\n\n                try {\n                    delete window[ jsonp ];\n                } catch( jsonpError ) {}\n            }\n\n            data = tmp;\n            jQuery.handleSuccess( s, xhr, status, data );\n            jQuery.handleComplete( s, xhr, status, data );\n\n            if ( head ) {\n                head.removeChild( script );\n            }\n        };\n    }\n\n    if ( s.dataType === \"script\" &amp;&amp; s.cache === null ) {\n        s.cache = false;\n    }\n\n    if ( s.cache === false &amp;&amp; type === \"GET\" ) {\n        var ts = jQuery.now();\n\n        // try replacing _= if it is there\n        var ret = s.url.replace(rts, \"$1_=\" + ts);\n\n        // if nothing was replaced, add timestamp to the end\n        s.url = ret + ((ret === s.url) ? (rquery.test(s.url) ? \"&amp;\" : \"?\") + \"_=\" + ts : \"\");\n    }\n\n    // If data is available, append data to url for get requests\n    if ( s.data &amp;&amp; type === \"GET\" ) {\n        s.url += (rquery.test(s.url) ? \"&amp;\" : \"?\") + s.data;\n    }\n\n    // Watch for a new set of requests\n    if ( s.global &amp;&amp; jQuery.active++ === 0 ) {\n        jQuery.event.trigger( \"ajaxStart\" );\n    }\n\n    // Matches an absolute URL, and saves the domain\n    var parts = rurl.exec( s.url ),\n        remote = parts &amp;&amp; (parts[1] &amp;&amp; parts[1] !== location.protocol || parts[2] !== location.host);\n\n    // If we're requesting a remote document\n    // and trying to load JSON or Script with a GET\n    if ( s.dataType === \"script\" &amp;&amp; type === \"GET\" &amp;&amp; remote ) {\n        var head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        var script = document.createElement(\"script\");\n        if ( s.scriptCharset ) {\n            script.charset = s.scriptCharset;\n        }\n        script.src = s.url;\n\n        // Handle Script loading\n        if ( !jsonp ) {\n            var done = false;\n\n            // Attach handlers for all browsers\n            script.onload = script.onreadystatechange = function() {\n                if ( !done &amp;&amp; (!this.readyState ||\n                        this.readyState === \"loaded\" || this.readyState === \"complete\") ) {\n                    done = true;\n                    jQuery.handleSuccess( s, xhr, status, data );\n                    jQuery.handleComplete( s, xhr, status, data );\n\n                    // Handle memory leak in IE\n                    script.onload = script.onreadystatechange = null;\n                    if ( head &amp;&amp; script.parentNode ) {\n                        head.removeChild( script );\n                    }\n                }\n            };\n        }\n\n        // Use insertBefore instead of appendChild  to circumvent an IE6 bug.\n        // This arises when a base node is used (#2709 and #4378).\n        head.insertBefore( script, head.firstChild );\n\n        // We handle everything using the script element injection\n        return undefined;\n    }\n\n    var requestDone = false;\n\n    // Create the request object\n    var xhr = s.xhr();\n\n    if ( !xhr ) {\n        return;\n    }\n\n    // Open the socket\n    // Passing null username, generates a login popup on Opera (#2865)\n    if ( s.username ) {\n        xhr.open(type, s.url, s.async, s.username, s.password);\n    } else {\n        xhr.open(type, s.url, s.async);\n    }\n\n    // Need an extra try/catch for cross domain requests in Firefox 3\n    try {\n        // Set content-type if data specified and content-body is valid for this type\n        if ( (s.data != null &amp;&amp; !noContent) || (origSettings &amp;&amp; origSettings.contentType) ) {\n            xhr.setRequestHeader(\"Content-Type\", s.contentType);\n        }\n\n        // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n        if ( s.ifModified ) {\n            if ( jQuery.lastModified[s.url] ) {\n                xhr.setRequestHeader(\"If-Modified-Since\", jQuery.lastModified[s.url]);\n            }\n\n            if ( jQuery.etag[s.url] ) {\n                xhr.setRequestHeader(\"If-None-Match\", jQuery.etag[s.url]);\n            }\n        }\n\n        // Set header so the called script knows that it's an XMLHttpRequest\n        // Only send the header if it's not a remote XHR\n        if ( !remote ) {\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n        }\n\n        // Set the Accepts header for the server, depending on the dataType\n        xhr.setRequestHeader(\"Accept\", s.dataType &amp;&amp; s.accepts[ s.dataType ] ?\n            s.accepts[ s.dataType ] + \", \n</code></pre>", "children": []})