C({"name": "DocumentJS.types.function", "type": "class", "parent": "../documentjs/types/function.js", "comment": "<p>Documents a function. Doc can guess at a functions name and params if the source following a comment matches something like:</p>\n\n<pre><code class='javascript'>myFuncOne : function(param1, param2){}  //or\nmyFuncTwo = function(param1, param2){}  </code></pre>\n\n<h3>Directives</h3>\n\n<p>Use the following directives to document a function.</p>\n\n<pre><code class='javascript'>[ DocumentJS.types.function | @function ] functionName                       -&gt; Forces a function\n[ DocumentJS.tags.param | @param ] {optional:type} paramName Description -&gt; Describes a parameter\n[ DocumentJS.tags.return | @return ] {type} Description                    -&gt; Describes the return value</code></pre>\n\n<h3>Example</h3>\n\n<pre><code class='javascript'>/* Adds, Mr. or Ms. before someone's name\n * [ DocumentJS.tags.param | @param ] {String} name the persons name\n * [ DocumentJS.tags.param | @param ] {optional:Boolean} gender true if a man, false if female.  Defaults to true.\n * [ DocumentJS.tags.return | @return ] {String} returns the appropriate honorific before the person's name.\n */  \nhonorific = function(name, gender){</code></pre> ", "tags": ["documentation"], "parents": ["DocumentJS.types"], "children": ["DocumentJS.types.function.static", "DocumentJS.types.function.static.code", "DocumentJS.types.function.static.parent"]})