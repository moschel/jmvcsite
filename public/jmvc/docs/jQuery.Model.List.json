C({"name": "jQuery.Model.List", "inherits": "jQuery.Class", "type": "class", "parent": "../jquery/model/list/list.js", "comment": "<p>Model lists are useful for:</p>\n\n<ul>\n<li>Adding helpers for multiple model instances.</li>\n<li>Faster HTML inserts.</li>\n<li>Storing and retrieving multiple instances.</li>\n</ul>\n\n<h2>List Helpers</h2>\n\n<p>It's pretty common to deal with multiple items at a time.\nList helpers provide methods for multiple model instances.</p>\n\n<p>For example, if we wanted to be able to destroy multiple\ncontacts, we could add a destroyAll method to a Contact\nlist:</p>\n\n<pre><code class='javascript'>$.Model.List.extend(\"Contact.List\",{\n  destroyAll : function(){\n    $.post(\"/destroy\",\n      this.map(function(contact){\n        return contact.id\n      }),\n      this.callback('destroyed'),\n      'json')\n  },\n  destroyed : function(){\n    this.each(function(){\n      this.destroyed();\n    })\n  }\n});</code></pre>\n\n<p>The following demo illustrates this.  Check\nmultiple Contacts and click \"DESTROY ALL\"</p>\n\n<div class='demo_wrapper' data-demo-src='jquery/model/list/list.html'></div>\n\n<h2>Faster Inserts</h2>\n\n<p>The 'easy' way to add a model to an element is simply inserting\nthe model into the view like:</p>\n\n<pre><code class='xml'>&lt;div &lt;%= task %>> A task &lt;/div></code></pre>\n\n<p>And then you can use [jQuery.fn.models $('.task').models()].</p>\n\n<p>This pattern is fast enough for 90% of all widgets.  But it\ndoes require an extra query.  Lists help you avoid this.</p>\n\n<p>The [jQuery.Model.List.get get] method takes elements and\nuses their className to return matched instances in the list.</p>\n\n<p>To use get, your elements need to have the instance's \nidentity in their className.  So to setup a div to reprsent\na task, you would have the following in a view:</p>\n\n<pre><code class='xml'>&lt;div class='task &lt;%= task.identity() %>'> A task &lt;/div></code></pre>\n\n<p>Then, with your model list, you could use get to get a list of\ntasks:</p>\n\n<pre><code class='javascript'>taskList.get($('.task'))</code></pre>\n\n<p>The following demonstrates how to use this technique:</p>\n\n<div class='demo_wrapper' data-demo-src='jquery/model/list/list-insert.html'></div>", "parents": ["jQuery.Model"], "download": "jquery/dist/jquery.model.list.js", "downloadSize": 0, "test": "jquery/model/list/qunit.html", "plugin": "jquery/model/list", "children": ["jQuery.Model.List.prototype", "jQuery.Model.List.prototype.slice", "jQuery.Model.List.prototype.match", "jQuery.Model.List.prototype.grep", "jQuery.Model.List.prototype.get", "jQuery.Model.List.prototype.remove", "jQuery.Model.List.prototype.elements", "jQuery.Model.List.prototype.push", "jQuery.Model.List.prototype.pop", "jQuery.Model.List.prototype.shift", "jQuery.Model.List.prototype.unshift", "jQuery.Model.List.prototype.splice", "jQuery.Model.List.prototype.sort", "jQuery.Model.List.prototype.each", "jQuery.Model.List.prototype.map", "jQuery.Model.List.Cookie", "jQuery.Model.List.Local"]})