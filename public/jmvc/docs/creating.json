C({"name": "creating", "type": "page", "parent": "../jmvc/pages/creating.js", "comment": "<p>We're going to create a basic cookbook application that\nlets us create, read, update, and delete (CRUD) \nrecipes. It will look like:</p>\n\n<p><img src='http://wiki.javascriptmvc.com/wiki/images/c/c8/Cookbook.png'/></p>\n\n<p>JavaScriptMVC uses \n[steal.generate generator scripts] to \nassist you\nin setting up your application's \nfiles and folders.  They make everything you need to fall\ninto the pit of success!</p>\n\n<h2>Generating an Application</h2>\n\n<p>To create your application, open a console window and \nnavigate to your public directory. Run:</p>\n\n<pre><code class='text'>> js jquery\\generate\\app cookbook</code></pre>\n\n<p>This script creates an application folder and \nfiles. Here's what each file does:</p>\n\n<pre><code class='javascript'>cookbook/                // app for your folder\n  cookbook.css           // css for your app\n  cookbook.html          // a page for your app\n  cookbook.js            // app file, loads other files\n  controllers/           // plugins & widgets\n  docs/                  // documentation\n  fixtures/              // simulated ajax responses\n  funcunit.html          // functional test page\n  models/                // model & data layers\n  qunit.html             // unit test page\n  resources/             // 3rd party scripts\n  scripts/               // command line scripts\n    build.html           // html for build script\n    build.js             // build script\n    clean.js             // code cleaning / linting\n    docs.js              // create documentation\n  test/                    \n    funcunit             // functional tests\n      cookbook_test.js   // functional test\n      funcunit.js        // loads functional tests\n    qunit/               // unit tests\n      cookbook_test.js   // unit test\n      qunit.js           // loads unit tests\n  views/                 // client side templates</code></pre>\n\n<p>Read [folders Folder and File Organization]\nfor more information.</p>\n\n<p>We'll use cookbook.html for our application. If \nyou need to make another page for your app you \ncan generate it:</p>\n\n<pre><code class='text'>> js jquery\\generate\\page cookbook index.html\nGenerating ... index.html</code></pre>\n\n<p>Or you add the steal script to an existing page \npage followed by <code>?cookbook</code> like:</p>\n\n<pre><code class='html'>&lt;script type='text/javascript'\n        src='../path/to/steal/steal.js?cookbook'>\n&lt;/script></code></pre>\n\n<p>If you open cookbook/cookbook.html, you'll see a\nJavaScriptMVC welcome screen.  </p>\n\n<p><img src='http://wiki.javascriptmvc.com/wiki/images/4/42/Welcome.png' /></p>\n\n<h2>Scaffolding Recipes</h2>\n\n<p>The scaffold generator creates all the code you need for simple \nCreate-Read-Update-Delete (CRUD) functionality. <br />\nFor our cookbook app, we want to make recipes. \nTo scaffold recipes run the following in a console:</p>\n\n<pre><code class='text'>> js jquery\\generate\\scaffold Cookbook.Models.Recipe</code></pre>\n\n<p>Here's what each part does:</p>\n\n<p><DL>\n<DT><code>recipe_controller.js</code></DT>\n<DD>Cookbook.Controllers.Recipe, like all [jQuery.Controller Controllers], \n    respond to events such as click and manipulate the DOM.</DD>\n<DT><code>edit.ejs,init.ejs,list.ejs,show.ejs</code></DT>\n<DD>[jQuery.View Views] are JavaScript templates for easily creating HTML.</DD>\n<DT><code>recipe_controller_test.js</code></DT>\n<DD>[FuncUnit Tests] the CRUD functionality of the user interface.</DD>\n<DT><code>recipe.js</code></DT>\n<DD>Cookbook.Models.Recipe [jQuery.Model model] performs AJAX requests by manipulating services.</DD>\n<DT><code>recipes.get</code></DT>\n<DD>[jQuery.fixture Fixtures] simulate AJAX responses.  This fixture responds to GET '/recipes'.</DD>\n<DT><code>recipe_test.js</code></DT>\n<DD>A [FuncUnit unit test] that tests Recipe model.</DD>\n</DL></p>\n\n<h2>Including Scripts</h2>\n\n<p>After generating the scaffolding files, you\nmust steal them in your application file. Open <b>cookbook/cookbook.js</b> and modify the code to steal\nyour recipe controller \nand model as follows:</p>\n\n<pre><code class='javascript'>steal.plugins(    \n    'jquery/controller',            \n    'jquery/controller/subscribe',  \n    'jquery/view/ejs',              \n    'jquery/model',                 \n    'jquery/dom/fixture',           \n    'jquery/dom/form_params')       \n    .css('cookbook')    \n\n    .resources()                    \n    .models('recipe')                       \n    .controllers('recipe')                  \n    .views();</code></pre>\n\n<div class=\"whisper\">P.S. By default the app file loads\nthe most common MVC components and a few other useful plugins.\n</div>\n\n<p>To add your unit and functional tests, \ninclude them in your qunit.js \nand funcunit.js files.</p>\n\n<p><b>\ncookbook/test/qunit/qunit.js\n</b></p>\n\n<pre><code class='javascript'>steal\n  .plugins(\"funcunit/qunit\", \"cookbook\")\n  .then(\"cookbook_test\",<u><b>\"recipe_test\"</b></u>)</code></pre>\n\n<div class=\"whisper\">\nP.S. qunit.js describes what scripts are loaded into qunit.html\n</div>\n\n<p><b>\ncookbook/test/funcunit/funcunit.js\n</b></p>\n\n<pre><code class='javascript'>steal\n .plugins(\"funcunit\")\n .then(\"cookbook_test\",<u><b>\"recipe_controller_test\"</b></u>)</code></pre>\n\n<div class=\"whisper\">\nP.S. funcunit.js describes what scripts are loaded into funcunit.html\n</div>\n\n<h2>Run Cookbook</h2>\n\n<p>That's it. You've created a simple Cookbook \napplication. Open cookbook/cookbook.html in a browser. </p>\n\n<p><img src='http://wiki.javascriptmvc.com/wiki/images/c/c8/Cookbook.png'/></p>\n\n<div style='background-color: #dddddd;  margin: 20px 0px;padding: 20px'>\n<p>\n<b style='color:red'>NOTICE:</b> \nIf you are having problems and \nusing Chrome from the filesystem, it's because Chrome has an\n[http://code.google.com/p/chromium/issues/detail?id=47416 insanely restrictive AJAX policies on the filesystem].\n</p>\n<p>\nEssentially, Chrome does not allow AJAX requests to\nfiles outside the html page's folder.  JavaScriptMVC\norganizes your files into separate folders.\n</p>\n<p>\nTo fix this, just run JavaScriptMVC from a web server.\nOr, you can use another browser.  Or you can add\n<code>--allow-file-access-from-files</code> to Chrome's start script.\n</p>\n<p>\nIf you're annoyed like we are, \n[http://code.google.com/p/chromium/issues/detail?id=47416 star the issue]\nand let \ngoogle know you'd like Chrome to work on the filesystem!\n</p>\n</div>\n\n<p>Continue to [testing Testing Cookbook] or continue to read how\nthis code works.</p>\n\n<h2>How it Works</h2>\n\n<p>The Cookbook application's functionality can be broken into 4 parts:</p>\n\n<ul>\n<li>Loading scripts.</li>\n<li>Get and show recipes and recipe form.</li></li>\n<li>Create a recipe.</li>\n<li>Delete a recipe.</li>\n<li>Edit a recipe.</li>\n</ul>\n\n<p>Lets see how this gets mapped to files in our Cookbook app.</p>\n\n<h3>Loading Scripts</h3>\n\n<p>In cookbook.html, you'll find a script tag like:</p>\n\n<pre><code class='javascript'>&lt;script type='text/javascript' \n        src='../steal/steal.js?cookbook,development'>   \n&lt;/script></code></pre>\n\n<p>This does 2 things:</p>\n\n<ul>\n<li>Loads the steal script.</li>\n<li>Tells steal to load the cookbook app (at <code>cookbook/cookbook.js</code>) in development mode.</li>\n</ul>\n\n<p>When <code>cookbook/cookbook.js</code> runs, it loads a bunch of \nplugins, then loads the generated \ncontroller and model.</p>\n\n<h3>Get and Show Recipes and Recipe Form.</h3>\n\n<p>When recipe_controller.js is loaded, it \ncreates Cookbook.Controllers.RecipeController.  </p>\n\n<p>RecipeController extends [jQuery.Controller controller]\nand describes what events control recipe functionality.</p>\n\n<p>Because RecipeController is a \"document\" controller \n(<code>onDocument: true</code>), \nit automatically listens on the document\nelement for events described by it's prototype methods.  The \n<code>load</code> method listens for the window onload event \nand calls RecipeController's <code>load</code> function.  </p>\n\n<p>The load function looks for a '#recipe' element in the page\nand creates one if not present. Then uses \nthe <code>Recipe</code> model to retrieve a list of \nrecipes and callback the <code>list</code> function.</p>\n\n<p><b>In  Recipe.findAll ....</b></p>\n\n<p>An Ajax request is made to <code>/recipe</code>, \nbut because the [jQuery.fixture fixtures] plugin\nis included, the ajax request is \ndirected to <code>//cookbook/fixtures/recipes.json.get</code>. After \nthe content is retrived from the fixture, \nnew instances of Recipe are created with the\n[jQuery.Model.static.wrapMany wrapMany] function\n and passed to the success callback.</p>\n\n<div class='whisper'>\n    P.S. [jQuery.fixture Fixtures] are awesome and help \n    you develop while the slow-poke backend teams catch up.\n    Once the service is ready you simply have to remove \n    the fixtures plugin from your application file.\n</div>\n\n<p>The success function is RecipeController's <code>list</code> method. <br />\n<code>List</code> replaces \nthe \"#recipe\" element's \nhtml with the content rendered \nby the template in\n<code>cookbook/views/recipe/init.ejs</code> with the \nrecipe's data.</p>\n\n<p><code>cookbook/views/recipe/init.ejs</code> draws out the outline of the\nrecipe table and the recipe form.  It uses the partial template \n<code>'views/recipe/list'</code> to draw out the individual recipes.</p>\n\n<div class='whisper'>\n    Multiple partial templates are used because other functionality will resuse them.\n</div>\n\n<h3>Create a Recipe.</h3>\n\n<p>RecipeController listens for \"form submit\".  It's \nimportant to note that \ndocument controllers only respond to events in an \nelement that has an id that matches\nthe name of the controller.  In this case, RecipeController\n only responds to \"form submit\"\nevents in \"#recipe\" element.</p>\n\n<p>When the event happens, the formParams plugin is used to turn the name\nand description fields into an object like:</p>\n\n<pre><code class='javascript'>{\n  name: \"The entered name\",\n  description : \"The entered description\" \n}</code></pre>\n\n<p>These attributes are passed to create a new recipe.  When \n[jQuery.Model.prototype.save save] is called, Recipe model's\ncreate function is called with the recipe's attributes.\nIn <code>Recipe.create</code> a post request is sent to\n\"/recipes\", but intercepted by the fixtures plugin.  Instead, fixtures call\nback success with a JSON object that looks like:</p>\n\n<pre><code class='javascript'>{\n  \"id\": <u><b>100</b></u>,\n  \"name\": \"The entered name\",\n  \"description\" : \"The entered description\" \n}</code></pre>\n\n<p>Success is the new recipe instance's \n[jQuery.Model.prototype.created created] function\nwhich updates the attributes of the recipe and \npublishes an OpenAjax \"recipe.created\" message. </p>\n\n<p>\"recipe.created subscribe\" messages are listened \nfor in RecipeController.  Here, RecipeController uses the \nlist template to insert the new \nrecipe's html into the page.</p>\n\n<h3>Destroy a Recipe.</h3>\n\n<p>When a recipe's html \"tr\" element created, it is \nlabeled with the recipe instance like this:</p>\n\n<pre><code class='html'>&lt;tr &lt;%= recipes[i]%> ></code></pre>\n\n<p>This code adds  the following to the recipe element:</p>\n\n<ul>\n<li>the \"recipe\" class name</li>\n<li>a unique identifier to the class name: <code>cookbook<em>models</em>recipe_5</code></li>\n<li>the recipe instance to jQuery.data</li>\n</ul>\n\n<p>Inside the tr, the destroy link look like this:</p>\n\n<pre><code class='html'>&lt;a class=\"destroy\">destroy&lt;/a></code></pre>\n\n<p>Recipe controller listens for clicks on destroy in the <br />\n<code>'.destroy click'</code> action.  if the person wants to destroy that\nrecipe, it uses <code>closest</code> to find the first parent with className= \n'recipe' and then gets back the model instance.  With that instance, it calls destroy.</p>\n\n<p>[jQuery.Model.prototype.destroy] calls Recipe.destroy with the id of the object to be \ndestroyed.  If successful, [jQuery.Model.prototype.destroyed] publishes a \n<code>\"recipe.destroyed\"</code> OpenAjax event.  RecipeController\nlistens for this event, then removes the element from the page.</p>\n\n<div class='whisper'>\nPRO TIP: Use OpenAjax events instead of callback functions.  This will help you a lot if\nyou have a representation of the same instance in multiple places on the page.  For\nexample, if you have 2 todo lists with a shared todo.  If that todo is deleted in one\nplace, it will be removed in the other.\n</div>\n\n<h3>Edit Recipe</h3>\n\n<p>Edit starts out similar to destroy - RecipeController listens for \".edit click\" and gets\nthe recipe instance from <code>model()</code>.  Then RecipeController replaces the \ntr's html with the rendered content of the edit template.  </p>\n\n<p>The edit template adds an <b>Update</b> and <b>cancel</b>.  RecipeController \nlistens for <code>\".update click\"</code> and <code>\".cancel click\"</code>.  </p>\n\n<p>When <code>\".update click\"</code> happens, the model instance is updated\nwith the values in the input elements.  This results in a call to\nRecipe.update which tries to send a put request to 'recipe/:id', but instead\nuses fixtures.  </p>\n\n<p>When the request complates, a <code>\"recipe.updated\"</code> message is published.\nRecipeController listens for these events, and uses the show template to\nrender the updated content.</p>\n\n<p>When <code>\".cancel click\"</code> occurs, the tr's content is replaced using the\nshow template.</p>\n\n<h2>Adding isTasty</h2>\n\n<p>I hate mushrooms.  I'd like to know if a recipe is \ntasty (it doesn't have mushrooms) and list it in the \nRecipe's table.  Here's how to do that:</p>\n\n<h3>Add isTasty to Cookbook.Models.Recipe</h3>\n\n<p>Add an isTasty method to the prototype \nobject of Recipe model (at the end of recipe.js):</p>\n\n<pre><code class='javascript'>/* @Prototype */\n{\n  isTasty : function(){\n    return !/mushroom/.test(this.name+\" \"+this.description)\n  }\n})</code></pre>\n\n<h3>Adding an \"is tasty\" column</h3>\n\n<p>In <code>cookbook/views/recipe/init.ejs</code> \nadd a <b>th</b> like this:</p>\n\n<pre><code class='html'>&lt;% for(var attr in Cookbook.Models.Recipe.attributes){%>\n    &lt;% if(attr == 'id') continue;%>\n    &lt;th><%= attr%> &lt;/th>    \n&lt;%}%>\n<u><b>&lt;th>Tasty?&lt;/th></b></u>\n&lt;th>Options&lt;/th></code></pre>\n\n<p>In <code>cookbook/views/recipe/show.ejs</code> add a <b>td</b> like this:</p>\n\n<pre><code class='html'>&lt;%for(var attribute in this.Class.attributes){%>\n    &lt;%if(attribute == 'id') continue;%>\n    &lt;td class='&lt;%= attribute%>'>\n            &lt;%=this[attribute]%>\n    &lt;/td>\n&lt;%}%>\n<u><b>&lt;td>&lt;%= this.isTasty() %>&lt;/td></b></u>\n&lt;td>\n    &lt;a href='javascript: void(0)' class='edit'>edit&lt;/a>\n    &lt;a href='javascript: void(0)' class='destroy'>destroy&lt;/a>\n&lt;/td></code></pre>\n\n<p>Reload your page.  You should see the \nTasty column.  Add a recipe with mushrooms\nand Tasty? should be false.</p>\n\n<p>Continue to [testing Testing Cookbook].</p>", "title": "2.2. Creating Cookbook", "parents": ["getstarted"], "children": []})