C({"name": "jQuery.Controller.prototype.bind", "params": {"el": {"description": "", "type": "", "optional": false, "order": 0, "name": "el"}, "eventName": {"description": "<p>The event to listen for.</p>", "type": "String", "optional": false, "order": 1, "name": "eventName"}, "func": {"description": "<p>A callback function or the String name of a controller function.  If a controller\nfunction name is given, the controller function is called back with the bound element and event as the first\nand second parameter.  Otherwise the function is called back like a normal bind.</p>", "type": "Function|String", "optional": false, "order": 2, "name": "func"}, "element": {"order": 3, "description": "<p>element the element to be bound</p>", "name": "element", "type": "HTMLElement|jQuery.fn", "optional": true, "default": "this.element"}}, "ret": {"description": "<p>The id of the binding in this._bindings</p>", "type": "Integer"}, "type": "function", "parent": "jQuery.Controller.prototype", "comment": "<p>Bind attaches event handlers that will be removed when the controller is removed. <br />\nThis is a good way to attach to an element not in the controller's element.\n<br/></p>\n\n<h3>Examples:</h3>\n\n<pre><code class='javascript'>init: function() {\n   // calls somethingClicked(el,ev)\n   this.bind('click','somethingClicked') \n\n   // calls function when the window is clicked\n   this.bind(window, 'click', function(ev){\n     //do something\n   })\n},\nsomethingClicked: function( el, ev ) {\n\n}</code></pre>", "children": []})