C({"name": "FuncUnit.prototype.type", "params": {"text": {"description": "the text you want to type", "type": "String", "optional": false, "order": 0, "name": "text"}, "callback": {"description": "a callback that is run after typing, but before the next action.", "type": "Function", "optional": true, "order": 1, "name": "callback"}}, "ret": {"description": "returns the funcUnit for chaining.\n ", "type": "FuncUnit"}, "type": "function", "parent": "FuncUnit.prototype", "comment": "\nTypes text into an element.  This makes use of [Syn.prototype.type] and works in \na very similar way.\n<h3>Quick Examples</h3>\n\n<pre><code class='javascript'>//types hello world\nS('#bar').type('hello world')\n\n//submits a form by typing \\r\nS(\"input[name=age]\").type(\"27\\r\")\n\n//types FuncUnit, then deletes the Unit\nS('#foo').type(\"FuncUnit\\b\\b\\b\\b\")\n\n//types JavaScriptMVC, then removes the MVC\nS('#zar').type(\"JavaScriptMVC[left][left][left]\"+\n                     \"[delete][delete][delete]\")\n         \n//types JavaScriptMVC, then selects the MVC and\n//deletes it\nS('#zar').type(\"JavaScriptMVC[shift]\"+\n               \"[left][left][left]\"+\n               \"[shift-up][delete]\")</code></pre><h2>Characters</h2>\nYou can type the characters found in [Syn.static.keycodes].\n\n", "children": []})