C({"name": "jQuery.Drop", "type": "class", "parent": "../steal/dev/dev.js", "comment": "<p>Provides drop events as a special event to jQuery. <br />\nBy binding to a drop event, the your callback functions will be \ncalled during the corresponding phase of drag.</p>\n\n<h2>Drop Events</h2>\n\n<p>All drop events are called with the native event, an instance of drop, and the drag.  Here are the available drop \nevents:</p>\n\n<ul>\n    <li><code>dropinit</code> - the drag motion is started, drop positions are calculated.</li>\n <li><code>dropover</code> - a drag moves over a drop element, called once as the drop is dragged over the element.</li>\n <li><code>dropout</code> - a drag moves out of the drop element.</li>\n <li><code>dropmove</code> - a drag is moved over a drop element, called repeatedly as the element is moved.</li>\n <li><code>dropon</code> - a drag is released over a drop element.</li>\n <li><code>dropend</code> - the drag motion has completed.</li>\n</ul>\n\n<h2>Examples</h2>\n\n<p>Here's how to listen for when a drag moves over a drop:</p>\n\n<p><pre><code class='javascript'>$('.drop').live(\"dropover\", function(ev, drop, drag){\n  $(this).addClass(\"drop-over\")\n})</code></pre>A bit more complex example:</p>\n\n<div class='demo_wrapper' data-demo-src='jquery/event/drop/drop.html'></div>", "parents": ["specialevents"], "plugin": "jquery/event/drop", "download": "jquery/dist/jquery.event.drop.js", "downloadSize": 0, "test": "jquery/event/drag/qunit.html", "construct": "The constructor is never called directly.\n \n", "ret": {"type": "jquery.drop", "description": ""}, "children": ["jQuery.Drop.sortByDeepestChild", "jQuery.Drop.isAffected", "jQuery.Drop.deactivate", "jQuery.Drop.activate", "jQuery.Drop.compile", "jQuery.Drop.clear", "jQuery.Drop.cache", "jQuery.Drop.cancel"]})