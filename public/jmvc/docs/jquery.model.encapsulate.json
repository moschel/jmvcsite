C({"name": "jquery.model.encapsulate", "type": "page", "parent": "../jquery/model/pages/encapsulate.js", "comment": "<h1>Service / Ajax Encapsulation</h1>\n\n<p>Models encapsulate your application's raw data.  </p>\n\n<p>The majority of the time, the raw data comes from \nservices your server provides.  For example, \nif you make a request to:</p>\n\n<pre><code>GET /contacts.json</code></pre>\n\n<p>The server might return something like:</p>\n\n<pre><code>[{\n  'id': 1,\n  'name' : 'Justin Meyer',\n  'birthday': '1982-10-20'\n},\n{\n  'id': 2,\n  'name' : 'Brian Moschel',\n  'birthday': '1983-11-10'\n}]</code></pre>\n\n<p>In most jQuery code, you'll see something like the following to retrieve contacts\ndata:</p>\n\n<pre><code class='javascript'>$.get('/contacts.json',\n      {type: 'tasty'}, \n      successCallback,\n      'json')</code></pre></code></pre>\n\n<p>Instead, model encapsulates (wraps) this request so you call it like:</p>\n\n<pre><code class='javascript'>Contact.findAll({type: 'old'}, successCallback);</code></pre>\n\n<p>And instead of raw data, findAll returns contact instances that let you do things like:</p>\n\n<pre><code class='javascript'>// destroy the contact\ncontact.destroy() \n\n// update the contact\ncontact.update({name: \"Jeremy\"})\n\n// create a contact\nnew Contact({name: \"Alex\"}).save();</code></pre>\n\n<h2>Encapsulation Demo</h2>\n\n<p>The Grid demo shows using two different models with the same widget.</p>\n\n<div class='demo_wrapper' data-demo-src='jquery/model/demo-encapsulate.html'></div>\n\n<h2>How to Encapsulate</h2>\n\n<p>Think of models as a contract for creating, reading, updating, and deleting data. <br />\nBy filling out a model, you can pass that model to a widget and the widget will use \nthe model as a proxy for your data.  </p>\n\n<p>The following chart shows the methods most models provide:</p>\n\n<table>\n    <tr>\n        <td>Create</td><td><pre>Contact.create(attrs, success, error</pre></td>\n    </tr>\n    <tr>\n        <td>Read</td><td><pre>Contact.findAll(params,success,error)\nContact.findOne(params, success, error)</pre></td>\n    </tr>\n    <tr>\n        <td>Update</td><td><pre>Contact.update(id, attrs, success, error)</pre></td>\n    </tr>\n    <tr>\n        <td>Delete</td><td><pre>Contact.destroy(id, success, error)</pre></td>\n    </tr>\n</table>\n\n<p>By filling out these methods, you get the benefits of encapsulation, \nAND all the other magic Model provides.  Lets see how we might fill out the\n<code>Contact.findAll</code> function:</p>\n\n<pre><code class='javascript'>$.Model.extend('Contact',\n{\n  findAll : function(params, success, error){\n\n    // do the ajax request\n    $.get('/contacts.json',\n      params, \n      function( json ){ \n\n        // on success, create new Contact\n        // instances for each contact\n        var wrapped = [];\n\n        for(var i =0; i< json.length;i++){\n          wrapped.push( new Contact(json[i] ) );\n        }\n\n        //call success with the contacts\n        success( wrapped );\n\n      },\n      'json');\n  }\n},\n{\n  // Prototype properties of Contact.\n  // We'll learn about this soon!\n});</code></pre>\n\n<p>Well, that would be annoying to write out every time.  Fortunately, models have\nthe wrapMany method which will make it easier:</p>\n\n<pre><code class='javascript'>findAll : function(params, success, error){\n    $.get('/contacts.json',\n      params, \n      function( json ){ \n        success(Contact.wrapMany(json));        \n      },\n      'json');\n  }</code></pre>\n\n<p>Model is based off JavaScriptMVC's <code>jQuery.Class</code>. It's callback allows us to pipe\nwrapMany into the success handler and make our code even shorter:</p>\n\n<pre><code class='javascript'>findAll : function(params, success, error){\n    $.get('/contacts.json',\n    params, \n    this.callback(['wrapMany', success]),\n    'json')\n  }</code></pre>\n\n<p>If we wanted to make a list of contacts, we could do it like:</p>\n\n<pre><code class='javascript'>Contact.findAll({},function(contacts){\n  var html = [];\n  for(var i =0; i < contacts.length; i++){\n    html.push('&lt;li>'+contacts[i].name + '&lt;/li>')\n  }\n  $('#contacts').html( html.join('') );\n});</code></pre>", "title": "Service Encapsulation", "parents": ["jQuery.Model"], "children": []})