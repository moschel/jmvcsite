C({"name": "jQuery.Controller.prototype.delegate", "params": {"element": {"description": "<p>element</p>", "type": "HTMLElement|jQuery.fn", "optional": true, "order": 0, "name": "element", "default": "this.element"}, "selector": {"description": "<p>the css selector</p>", "type": "String", "optional": false, "order": 1, "name": "selector"}, "eventName": {"description": "", "type": "String", "optional": false, "order": 2, "name": "eventName"}, "func": {"description": "<p>A callback function or the String name of a controller function.  If a controller\nfunction name is given, the controller function is called back with the bound element and event as the first\nand second parameter.  Otherwise the function is called back like a normal bind.</p>", "type": "Function|String", "optional": false, "order": 3, "name": "func"}}, "ret": {"description": "<p>The id of the binding in this._bindings</p>", "type": "Integer"}, "type": "function", "parent": "jQuery.Controller.prototype", "comment": "<p>Delegate will delegate on an elememt and will be undelegated when the controller is removed.\nThis is a good way to delegate on elements not in a controller's element.<br/></p>\n\n<h3>Example:</h3>\n\n<pre><code class='javascript'>// calls function when the any 'a.foo' is clicked.\nthis.delegate(document.documentElement,'a.foo', 'click', function(ev){\n  //do something\n})</code></pre>", "children": []})