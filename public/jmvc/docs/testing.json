C({"name": "testing", "type": "page", "parent": "../jmvc/pages/testing.js", "comment": "<h1 class='addFavorite'>Testing Cookbook\n</h1>\n\n<p>[FuncUnit] tiered approach allows unit and functional testing in the browser, \n[http://www.mozilla.org/rhino/ Rhino], and \n[http://seleniumhq.org/ Selenium].\nWhen you scaffolded recipe, it created tests for you.  This guide will show you how to:\n</p>\n\n<ul>\n    <li>Run unit tests.</li>\n    <li>Run functional tests.</li>\n    <li>Understand the qUnit unit tests.</li>\n    <li>Understand the FuncUnit functional tests.</li>\n    <li>Test isTasty functionality.</li>\n</ul>\n\n<h2>Run Unit Tests</h2>\n\n<p>JavaScriptMVC uses qUnit to test unit functionality (like models and basic plugins).  You can run these\ntests in the browser or Envjs.  </p>\n<p><code>cookbook/test/qunit/qunit.js</code> loads qunit and your unit tests.  Make sure\nyou have added <code>recipe_test.js</code> like:</p>\n\n<pre><code class='javascript'>steal\n  .plugins(\"funcunit/qunit\", \"cookbook\")\n  .then(\"cookbook_test\",<u><b>'recipe_test'</b></u>)</code></pre><h3>Run Unit Tests in the Browser</h3>\n<p>Open <code>cookbook/qunit.html</code>.  You should see something like:</p>\n<img src='http://wiki.javascriptmvc.com/wiki/images/2/27/Qunit.png'/>\n<h3>Run Unit Tests in Envjs</h3>\n<p>In a command window type:</p>\n\n<pre><code class='javascript'>> funcunit\\envjs cookbook/qunit.html</code></pre>This runs qunit.html in a simulated browser environment.  The output should look like:<br/>\n<img src='http://wiki.javascriptmvc.com/wiki/images/2/24/Qunit-envjs.png' width='500px'>\n\n<h2>Run Functional Tests</h2>\n<p>JavaScriptMVC uses FuncUnit to add browser and selenium-based functional \ntesting to qUnit.  You can run tests in the browser or using selenium.</p>\n<p><code>cookbook/test/funcunit/funcunit.js</code> loads funcunit and your functional tests.  \nMake sure you have added <code>recipe_controller_test.js</code> like:</p>\n\n<pre><code class='javascript'>steal\n .plugins(\"funcunit\")\n .then(\"cookbook_test\",<u><b>'recipe_controller_test'</b></u>)</code></pre>\n<h3>Run Functional Tests in the Browser</h3>\n<p>Open <code>cookbook/funcunit.html</code>.  You should see something like:</p>\n<img src='http://wiki.javascriptmvc.com/wiki/images/b/b6/Funcunit.png'/>\n<h3>Run Functional Tests in Selenium</h3>\n<p>In a command window type:</p>\n\n<pre><code class='javascript'>> funcunit\\envjs cookbook\\funcunit.html</code></pre>This should open Firefox and IE if you are using Windows.  The results of the\ntest should look like:<br/>\n<img src='http://wiki.javascriptmvc.com/wiki/images/a/a7/Funcunit-envjs.png' width='500px'>\n<div class='whisper'>\n    If Selenium is unable to open your browsers, it's likely you have them in an\n    unusual location.  Read [FuncUnit.static.browsers] for information on how to configure browsers\n    so selenium can find them.\n</div>\n\n<p>\nIf you are having trouble running the tests in Internet Explorer, you need to change a few settings in the browser.  Please see the [FuncUnit FuncUnit documentation] for troubleshooting help.\n</p>\n\n<h2>Understanding qUnit Tests</h2>\n\n<p>FuncUnit adds very little to qUnit, so the best place to start understanding qUnit is its own\n[http://docs.jquery.com/QUnit documentation].  FuncUnit / JavaScriptMVC just adds a way to:</p>\n\n<ul>\n    <li>Organize tests</li>\n    <li>Load tests</li>\n    <li>Run and report results in Envjs</li>\n</ul>\n\n<p>Here's how it works ...</p>\n<ol>\n    <li><code>cookbook/qunit.html</code> loads steal.js and tells it to load:\n        <code>cookbook/test/qunit/qunit.js</code> with the following script tag:\n\n<pre><code class='javascript'>&lt;script type='text/javascript' \n       src='../steal/steal.js?steal[app]=cookbook/test/qunit'>\n&lt;/script></code></pre>    </li>\n    <li>In qUnit.js, the qUnit plugin and tests are loaded.</li>\n    <li>In <code>cookbook/test/qunit/cookbook_test.js</code>\n        tests are added to be run by qunit.\n    </li>\n    <li>When the page loads, the tests are run.</li>\n</ol>\n<p>When the page is run in Envjs, qUnit does the same 4 steps, but reports\nthe messages on the command line.</p>\n\n<p>As an example of a test, let look at how the findAll test works:</p>\n\n<pre><code class='javascript'>//creates a test\ntest(\"findAll\", function(){\n  //prevents the next test from running\n  stop(2000);\n\n  //requests recipes\n  Cookbook.Models.Recipe.findAll({}, function(recipes){\n\n    //makes sure we have something\n    ok(recipes)\n\n    //makes sure we have at least 1 recipe\n    ok(recipes.length)\n\n    //makes sure a recipe looks right\n    ok(recipes[0].name)\n    ok(recipes[0].description)\n\n    //allows the next test to start\n    start()\n  });\n})</code></pre>\n\n<h2>Understanding FuncUnit Tests</h2>\n<p>FuncUnit adds to qUnit the ability to open another page, in this case\n<code>cookbook/cookbook.html</code>, perform actions on it, and\nget information from it.</p>\n<p>\n    The <code>cookbook/funcunit.html</code>  page\n    works just like the <code>qunit.html</code> page except the 'funcunit' plugin is loaded which \n    provides [FuncUnit].  FuncUnit is aliased to \"<b>S</b>\" to highlight the similarity between its API\n    and jQuery's API.\n</p>\n\n<p>Let take a quick look at a FuncUnit test:</p>\n\n<pre><code class='javascript'>test(\"create recipes\", function(){\n\n  //type Ice in the name field\n  S(\"[name=name]\").type(\"Ice\")\n\n  //type Cold Water in the description field\n  S(\"[name=description]\").type(\"Cold Water\")\n\n  //click the submit button\n  S(\"[type=submit]\").click()\n\n  //wait until the 2nd recipe exists\n  S('.recipe:nth-child(2)').exists()\n\n  //Gets the text of the first td\n  S('.recipe:nth-child(2) td:first').text(function(text){\n\n    //checks taht it has ice\n    ok(text.match(/Ice/), \"Typed Ice\");\n  });\n\n})</code></pre><p>Wait ... why is getting the text passed a function?</p>\n<p>\n    Functional tests are largely many asynchronous actions \n    (clicks and keypresses)\n    with relatively few checks/assertions.  \n    FuncUnit's goal is to provide as readable and linear syntax as possible.\n    FuncUnit statements are actually stored and then run asynchronously.  This requires that\n    getting a value from the page happens in a callback function.\n</p>\n\n<p>For more information on FuncUnit, read its [FuncUnit documentation]</p>\n<h2>Testing isTasty</h2>\n<p>In the [creating Creating Cookbook] section of the Getting Started guide,\nwe added an isTasty function to be shown.  Lets see how we could unit test\nthat functionality.</p>\n<p>At the end of <code>recipe_test.js</code> we'll add code that \ncreates two recipe instances and checks if they are tasty.\n</p>\n\n<p><pre><code class='javascript'>test(\"isTasty\", function(){\n  var Recipe = Cookbook.Models.Recipe,\n      r1 = new Recipe({name: \"tea\",\n                       description: \"leaves and water\"}),\n      r2 = new Recipe({name: \"mushroom soup\",\n                       description: \"mushrooms and water\"});\n  ok(r1.isTasty(), \"tea is tasty\")\n  ok(!r2.isTasty(), \"mushroom soup is not tasty\")\n})</code></pre><p>Next, learn how to [compressing Compress Cookbook].</p></p>", "title": "2.3. Testing Cookbook", "parents": ["getstarted"], "children": []})