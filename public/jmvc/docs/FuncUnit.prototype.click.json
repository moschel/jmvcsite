C({"name": "FuncUnit.prototype.click", "type": "function", "parent": "FuncUnit.prototype", "comment": "<p>Clicks an element.  This uses [Syn.prototype.click] to issue a:</p>\n\n<ul>\n    <li><code>mousedown</code></li>\n <li><code>focus</code> - if the element is focusable</li>\n <li><code>mouseup</code></li>\n <li><code>click</code></li>\n</ul>\n\n<p>If no clientX/Y or pageX/Y is provided as options, the click happens at the \ncenter of the element.</p>\n\n<p>For a right click or double click use [FuncUnit.prototype.rightClick] or\n  [FuncUnit.prototype.dblclick].</p>\n\n<h3>Example</h3>\n\n<pre><code class='javascript'>//clicks the bar element\nS(\"#bar\").click()</code></pre>", "params": {"options": {"order": 0, "description": "<p>options to pass to the click event.  Typically, this is clientX/Y or pageX/Y like:</p>\n\n<pre><code class='javascript'>$('#foo').click({pageX: 200, pageY: 100});</code></pre>\n\n<p>You can pass it any of the serializable parameters you'd send to : \n[http://developer.mozilla.org/en/DOM/event.initMouseEvent initMouseEvent], but command keys are \ncontrolled by [FuncUnit.prototype.type].</p>", "name": "options", "type": "Object", "optional": true}, "callback": {"order": 1, "description": "<p>a callback that runs after the click, but before the next action.</p>", "name": "callback", "type": "Function", "optional": true}}, "ret": {"description": "<p>returns the funcunit selector for chaining.</p>", "type": "funcUnit"}, "children": []})