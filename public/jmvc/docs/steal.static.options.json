C({"name": "steal.static.options", "type": "attribute", "parent": "steal.static", "comment": "<p>Options that deal with steal</p>\n\n<table class='options'>\n<tr>\n    <th>Option</th><th>Default</th><th>Description</th>\n</tr>\n<tr><td>env</td><td>development</td><td>Which environment is currently running</td></tr>\n<tr><td>encoding</td><td>utf-8</td><td>What encoding to use for script loading</td></tr>\n<tr><td>cacheInclude</td><td>true</td><td>true if you want to let browser determine if it should cache script; false will always load script</td></tr>\n\n<tr><td>done</td><td>null</td><td>If a function is present, calls function when all steals have been loaded</td></tr>\n<tr><td>documentLocation</td><td>null</td><td>If present, ajax request will reference this instead of the current window location.  \nSet this in run_unit, to force unit tests to use a real server for ajax requests. </td></tr>\n<tr><td>logLevel</td><td>0</td><td>0 - Log everything<br/>1 - Log Warnings<br/>2 - Log Nothing</td></tr>\n<tr><td>startFile</td><td>null</td><td>This is the first file to load.  It is typically determined from the first script option parameter \nin the inclue script. </td></tr>\n</table>\n\n<ul>\n   <li><code>steal.options.startFile</code> - the first file steal loads.  This file\n   loads all other scripts needed by your application.</li>\n   <li><code>steal.options.env</code> - the environment (development or production)\n    that determines if steal loads your all your script files or a single\n    compressed file.\n   </li>\n</ul>\n\n<p><code>steal.options</code> can be configured by:</p>\n<ul>\n   <li>The steal.js script tag in your page (most common pattern).</li>\n   <li>An existing steal object in the window object</li>\n   <li><code>window.location.hash</code></li>\n</ul>\n<p>\n   The steal.js script tag is by far the most common approach. \n   For the other methods,\n   check out [steal.static.options] documentation.\n   To load <code>myapp/myapp.js</code> in development mode, your \n   script tag would look like:\n</p>\n\n<p><pre><code class='javascript'>&lt;script type='text/javascript'\n    src='path/to/steal.js?<u><b>myapp/myapp.js</b></u>,<u><b>development</b></u>'>\n&lt;/script></code></pre><div class='whisper'>\nTypically you want this script tag right before the closing body tag (<code>&lt;/body></code>) of your page.\n</div></p>\n\n<p>Note that the path to <code>myapp/myapp.js</code> \nis relative to the 'steal' folder's parent folder.  This\nis typically called the JavaScriptMVC root folder or just root folder if you're cool.</p>\n\n<p>And since JavaScriptMVC likes folder structures like:</p>\n\n<p><pre><code class='text'>\\myapp\n   \\myapp.js\n\\steal\n   \\steal.js</code></pre><p>If your path doesn't end with <code>.js</code>, JavaScriptMVC assumes you are loading an \napplication and will add <code>/myapp.js</code> on for you.  This means that this does the same thing too:</p></p>\n\n<p><pre><code class='javascript'>&lt;script type='text/javascript'\n       src='path/to/steal.js?<u><b>myapp</b></u>'>&lt;/script></code></pre><div class='whisper'>Steal, and everything else in JavaScriptMVC, provide these little shortcuts\nwhen you are doing things 'right'.  In this case, you save 9 characters \n(<code>/myapp.js</code>) by organizing your app the way, JavaScriptMVC expects.</div>\n</div></p>", "children": []})