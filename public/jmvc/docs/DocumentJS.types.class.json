C({"name": "DocumentJS.types.class", "type": "class", "parent": "../documentjs/types/class.js", "comment": "<p>Documents a 'Class'.</p>\n\n<p>A class is typically a collection of static and prototype functions.</p>\n\n<p>DocumentJS can automatically detect classes created with jQuery.Class.</p>\n\n<p>However, you can make anything a class with the <strong>@class</strong> <em>ClassName</em> directive.</p>\n\n<h3>Example:</h3>\n\n<pre><code class='javascript'>/**\n * @class \n * Person represents a human with a name.  Read about the \n * animal class [Animal | here]. \n */\nPerson = Animal.extend(\n/* @Static */\n{\n   /* Number of People */\n   count: 0\n},\n/* @Prototype */\n{\n   init : function(name){\n     this.name = name\n     this._super({warmblood: true})\n   },\n   /* Returns a formal name \n    * @return {String} the name with \"Mrs.\" added\n    */\n  fancyName : function(){\n     return \"Mrs. \"+this.name;\n  }\n})</code></pre> ", "tags": ["documentation"], "parents": ["DocumentJS.types"], "children": ["DocumentJS.types.class.static", "DocumentJS.types.class.static.code", "DocumentJS.types.class.static.parent"]})