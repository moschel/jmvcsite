C({"name": "jquery.model.typeconversion", "type": "page", "parent": "../jquery/model/pages/typeconversion.js", "comment": "<h1>Type Conversion</h1>\n\n<p>You often want to convert from what the model sends you to\na form more useful to JavaScript.  For example, \ncontacts might be returned from the server with dates that look like:\n\"1982-10-20\".  We can model to convert it to something closer \nto <code>new Date(1982,10,20)</code>. We can do this in two ways: </p>\n\n<h2>Way 1: Setters</h2>\n\n<p>The [jQuery.Model.prototype.attrs attrs]\nand [jQuery.Model.prototype.attr attr] function look for\na <code>set<b>ATTRNAME</b> function to handle setting the\ndate property.  </p>\n\n<p>By providing a function that takes the raw data and returns\na form useful for JavaScript, we can make our models (which\nuse attrs and attr) automatically convert server data.</p>\n\n<p>The following demo shows converting a contact's birthday into\na string.</p>\n\n<div class='demo_wrapper' data-demo-src='jquery/model/demo-setter.html'></div>\n\n<h2>Way 2: Convert</h2>\n\n<p>If you have a lot of dates, Setters won't scale well. \nInstead, you can set the type of \nan attribute and provide a function to convert that type.</p>\n\n<p>The following sets the birthday attribute to \"date\" and provides a date conversion function:</p>\n\n<pre><code class='javascript'>$.Model.extend(\"Contact\",\n{\n  attributes : { \n    birthday : 'date'\n  },\n  convert : {\n    date : function(raw){\n      if(typeof raw == 'string'){\n        var matches = raw.match(/(\\d+)-(\\d+)-(\\d+)/)\n        return new Date( matches[1], \n                        (+matches[2])-1, \n                         matches[3] )\n      }else if(raw instanceof Date){\n        return raw;\n      }\n    }\n  },\n  findAll : function( ... ){ ... }\n},\n{\n  // No prototype properties necessary\n})</code></pre>\n\n<div class='demo_wrapper' data-demo-src='jquery/model/demo-convert.html'></div> ", "title": "Type Conversion", "parents": ["jQuery.Model"], "children": []})